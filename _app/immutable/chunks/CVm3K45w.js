import"./NZTpNUN0.js";import"./CQ01xV_z.js";import{t as I,s as o,f as A,c as e,O as a,k as F,v as t,C as _}from"./9Ey5MMPk.js";var O=I('<h1><strong>Guide: Git & Our Documentation Flow</strong></h1> <p>Welcome to the backbone of our collaboration. All our work – from framework texts to project plans – is stored and developed using a system called <strong>Git</strong> and a platform called <strong>GitHub</strong>.</p> <ul><li><strong>Why do we use it?</strong> To be able to work together in an open, transparent, and asynchronous way. It functions as a “time machine” that lets us see all changes made, by whom, and why. It’s crucial for our autonomous work model to function.</li></ul> <h2><strong>Getting Started: Your Tools</strong></h2> <p>You can choose the path that suits you best. For beginners, we recommend the visual path.</p> <ul><li><p><strong>Option 1: The Visual Path (Recommended for beginners)</strong></p> <ol><li><strong>Create an account:</strong> Go to <a href="https://github.com" rel="nofollow">GitHub.com</a> and create a free account.</li> <li><strong>Install GitHub Desktop:</strong> Download and install <a href="https://desktop.github.com/" rel="nofollow">GitHub Desktop</a>. This program becomes your main “control panel”.</li></ol></li> <li><p><strong>Option 2: The Terminal Path (For the technically curious)</strong></p> <ol><li><strong>Create an account:</strong> Go to <a href="https://github.com" rel="nofollow">GitHub.com</a> and create a free account.</li> <li><strong>Install Git:</strong> Make sure you have Git installed on your computer. <ul><li>On <strong>Linux</strong> it’s usually pre-installed. Otherwise: <code>sudo apt-get install git</code> (Debian/Ubuntu) or equivalent for your distribution.</li> <li>On <strong>Mac</strong> you can install it via <code>xcode-select --install</code> in Terminal.</li> <li>On <strong>Windows</strong> it’s easiest to install <a href="https://git-scm.com/download/win" rel="nofollow">Git for Windows</a>, which gives you the “Git Bash” program.</li></ul></li></ol></li></ul> <h2><strong>Our Workflow: From Idea to Finished Contribution</strong></h2> <p>Here is our process in six steps. For each step, both methods are shown.</p> <h3><strong>Step 0: Find or Create a Task (GitHub Issues)</strong></h3> <p>This step is the same regardless of which path you choose, since it takes place on GitHub’s website. Before you start working, find or create an <strong>“Issue”</strong> (task) on the project’s “Issues” tab. This ensures that all work is connected to a specific goal.</p> <h3><strong>Step 1: Create a Workspace (Create a Branch)</strong></h3> <p>All work takes place in its own “branch” to keep the main project clean and stable.</p> <ul><li><p><strong>Visual Path (GitHub Desktop):</strong></p> <ol><li>Click on “Current Branch” at the top.</li> <li>Click on “New Branch”.</li> <li>Name your branch according to the pattern <code>your-initials/issue-number-description</code> (e.g., <code>bkh/21-improve-git-guide</code>).</li></ol></li> <li><p><strong>Terminal Path (Command Line):</strong></p> <ol><li><p>Make sure you have the latest version of the main project and are on the main branch (<code>main</code>).</p> <pre class="language-bash"><!></pre></li> <li><p>Create and switch to your new branch with a single command.</p> <pre class="language-bash"><!></pre></li></ol></li></ul> <h3><strong>Step 2: Make the Changes</strong></h3> <p>This is the creative work and is done in your favorite text editor, regardless of workflow.</p> <ul><li><strong>A Quick Guide to Markdown:</strong> <ul><li><code># Heading 1</code></li> <li><code>## Heading 2</code></li> <li><code>**Bold text**</code></li> <li><code>*Italic text*</code></li> <li><code>- A bullet point in a list</code></li> <li><code>[A link to GGF](https://globalgovernanceframeworks.org)</code></li></ul></li></ul> <h3><strong>Step 3: Save Your Work (Commit)</strong></h3> <p>A “Commit” is a saved logbook entry of your changes.</p> <ul><li><p><strong>Visual Path (GitHub Desktop):</strong></p> <ol><li>Write a short, descriptive summary in the “Summary” field.</li> <li>Click the “Commit to <code>[your-branch-name]</code>” button.</li></ol></li> <li><p><strong>Terminal Path (Command Line):</strong></p> <ol><li>Add the files you want to save to the “staging area”. <pre class="language-bash"><!></pre></li> <li>Create your “commit” with a clear message. <pre class="language-bash"><!></pre></li></ol></li></ul> <h3><strong>Step 4: Publish Your Workspace (Push)</strong></h3> <p>Upload your saved changes (commits) to GitHub.</p> <ul><li><p><strong>Visual Path (GitHub Desktop):</strong></p> <ul><li>Click the <strong>“Push origin”</strong> button.</li></ul></li> <li><p><strong>Terminal Path (Command Line):</strong></p> <ul><li>The first time you push a new branch, use <code>-u</code> to link your local branch to the one on GitHub. <pre class="language-bash"><!></pre></li> <li>Subsequent times on the same branch, <code>git push</code> is sufficient.</li></ul></li></ul> <h3><strong>Step 5: Propose Your Change (Pull Request)</strong></h3> <p>When you’re done, create a “Pull Request” (PR) to request that your work be incorporated into the main project. This step takes place on GitHub’s website.</p> <ul><li><strong>How to do it:</strong> <ol><li>After you have “pushed” your branch, go to the project’s page on GitHub.</li> <li>You will see a yellow box with the name of your branch and a button: <strong>“Compare & pull request”</strong>. Click on it.</li> <li>Give your PR a clear title and description. Write “Closes #21” (replace with the correct number) in the description to link it to your “Issue”.</li> <li>Click “Create Pull Request”.</li></ol></li></ul> <p>Now your contribution is submitted for review. This system is the heart of how we can build the project together in a transparent and structured way.</p>',1);function B(H){var l=O(),s=o(A(l),24),c=o(e(s),2),u=o(e(c),2),n=e(u),p=o(e(n),2),P=e(p);a(P,()=>`<code class="language-bash"><span class="token comment"># Switch to the main branch</span>
<span class="token function">git</span> checkout main

<span class="token comment"># Fetch the latest changes from GitHub</span>
<span class="token function">git</span> pull origin main</code>`),t(p),t(n);var h=o(n,2),g=o(e(h),2),T=e(g);a(T,()=>`<code class="language-bash"><span class="token comment"># Create a new branch and switch to it</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> bkh/21-improve-git-guide</code>`),t(g),t(h),t(u),t(c),t(s);var i=o(s,12),d=o(e(i),2),m=o(e(d),2),r=e(m),b=o(e(r)),S=e(b);a(S,()=>`<code class="language-bash"><span class="token comment"># Add all changed files</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span></code>`),t(b),t(r);var k=o(r,2),w=o(e(k)),W=e(w);a(W,()=>`<code class="language-bash"><span class="token comment"># Save the "staged" files with a message</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"Clarified the workflow in the git guide"</span></code>`),t(w),t(k),t(m),t(d),t(i);var f=o(i,6),v=o(e(f),2),y=o(e(v),2),G=e(y),C=o(e(G),3),x=e(C);a(x,()=>`<code class="language-bash"><span class="token comment"># Upload your branch to GitHub</span>
<span class="token function">git</span> push <span class="token parameter variable">-u</span> origin bkh/21-improve-git-guide</code>`),t(C),t(G),_(2),t(y),t(v),t(f),_(8),F(H,l)}export{B as default};
